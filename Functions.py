import datetime
import random
import CustomError
from MerchandiseEntity import Merchandise, Receipt, ItemInReceipt
from ManageProduct import ManageProduct


def convert_date(date_components: list[str]):
    if len(date_components) != 3:
        raise ValueError
    year, month, day = [int(item) for item in date_components]
    d = datetime.date(year, month, day)
    return d


def input_date() -> datetime.date:
    date_components = input('Nh·∫≠p ng√†y theo ƒë·ªãnh d·∫°ng YYYY-MM-DD: ').split('-')
    if len(date_components) != 3:
        raise ValueError
    year, month, day = [int(item) for item in date_components]
    d = datetime.date(year, month, day)
    return d


def option_1(db: ManageProduct):
    try:
        try:
            item: Merchandise = Merchandise()
            item.set_id(random.randint(0, 9999))
            item.set_name(input("Nh·∫≠p t√™n s·∫£n ph·∫©m: "))
            item.set_import_price(float(input("Nh·∫≠p gi√° nh·∫≠p h√†ng: ")))
            item.set_price(float(input("Nh·∫≠p gi√° b√°n s·∫£n ph·∫©m")))
            item.set_quantity(int(input("Nh·∫≠p s·ªë l∆∞·ª£ng nh·∫≠p h√†ng")))
            print("Nh·∫≠p ng√†y s·∫£n xu·∫•t h√†ng h√≥a")
            item.set_mfg(input_date())
            print("Nh·∫≠p h·∫°n s·ª≠ d·ª•ng h√†ng h√≥a")
            item.set_exp(input_date())
            db.add_merchandise(item)
        except ValueError:
            print('Nh·∫≠p sai d·ªØ li·ªáu r·ªìi üò≠')
            print("Th√™m h√†ng h√≥a th·∫•t b·∫°i")
    except CustomError.ModificationError:
        pass


def option_2(db: ManageProduct):
    mode: str = input("L·ª±a ch·ªçn ch·∫ø ƒë·ªô t√¨m ki·∫øm id | name | both (c·∫£ hai)")
    try:
        key: str = input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
        res: list[Merchandise] = db.find_merchandise(key, mode)
        if len(res) <= 0:
            print("Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng y√™u c·∫ßu")
            return
        for x in res:
            print("Danh s√°ch t√¨m ki·∫øm")
            print("---------------------------------")
            x.tostring()
        print("---------------------------------")
        return
    except CustomError.OptionInvalidError as e:
        print(e.message)
    pass


def option_3(db: ManageProduct):
    try:
        db.display()
        id_target: int = int(input("Nh·∫≠p id m·∫∑t h√†ng c·∫ßn s·ª≠a: "))
        item: Merchandise = db.get_merchandise(id_target)
        if item is None:
            print("Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng c·∫ßn s·ª≠a")
            return
        input_1 = input("Nh·∫≠p t√™n s·∫£n ph·∫©m: (Kh√¥ng vi·∫øt g√¨ v√† Enter ƒë·ªÉ b·ªè qua)")
        if len(input_1) > 0:
            item.set_name(input_1)

        input_2 = input("Nh·∫≠p gi√° nh·∫≠p h√†ng: (Kh√¥ng vi·∫øt g√¨ v√† Enter ƒë·ªÉ b·ªè qua)")
        if len(input_2) > 0:
            item.set_import_price(float(input_2))

        input_3 = input("Nh·∫≠p gi√° b√°n s·∫£n ph·∫©m (Kh√¥ng vi·∫øt g√¨ v√† Enter ƒë·ªÉ b·ªè qua)")
        if len(input_3) > 0:
            item.set_price(float(input_3))

        input_4 = input("Nh·∫≠p s·ªë l∆∞·ª£ng nh·∫≠p h√†ng (Kh√¥ng vi·∫øt g√¨ v√† Enter ƒë·ªÉ b·ªè qua)")
        if len(input_4) > 0:
            item.set_quantity(int(input_4))

        input_5 = input("Nh·∫≠p ng√†y s·∫£n xu·∫•t h√†ng h√≥a (Kh√¥ng vi·∫øt g√¨ v√† Enter ƒë·ªÉ b·ªè qua)")
        if len(input_5) > 0:
            item.set_mfg(convert_date(input_5.split('-')))
        input_6 = input("Nh·∫≠p h·∫°n s·ª≠ d·ª•ng h√†ng h√≥a (Kh√¥ng vi·∫øt g√¨ v√† Enter ƒë·ªÉ b·ªè qua)")
        if len(input_6) > 0:
            item.set_exp(input_6.split('-'))
        try:
            db.update_merchandise(id_target, item)
        except CustomError.InvalidOperation as e:
            print("L·ªñI: KH√îNG TH·ªÇ C·∫¨P NH·∫¨T TH√îNG TIN")
            print(e.message)
            return
    except ValueError:
        print('Nh·∫≠p sai d·ªØ li·ªáu r·ªìi üò≠')


def option_4(db: ManageProduct):
    mode = input("Nh·∫≠p ch·∫ø ƒë·ªô s·∫Øp x·∫øp: ASC - tƒÉng d·∫ßn | DES - gi·∫£m d·∫ßn")
    try:
        res: list[tuple[Merchandise, float]] = db.sort_total_revenue(mode)
        for x in res:
            x[0].tostring()
            print(f"------->SALES: {x[1]}")
    except CustomError.OptionInvalidError as e:
        print(e.message)
        return


def option_5(db: ManageProduct):
    try:
        m: int = int(input("Nh·∫≠p th√°ng c·∫ßn hi·ªÉn th·ªã"))
        y: int = int(input("Nh·∫≠p nƒÉm c·∫ßn hi·ªÉn th·ªã"))
        src = db.total_daily_revenue(m, y)
        for x in src:
            print(f"Date:{x} ---> sale: {src[x]}")
    except ValueError:
        print("D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng")
        return


def option_6(db: ManageProduct):
    db.display_top_5()


def option_7(db: ManageProduct):
    print("--------------------------------------")
    for x in db.close_to_exp():
        x.tostring()
    print("--------------------------------------")
    choice = input("B·∫°n c√≥ mu·ªën ƒëi·ªÅu ch·ªânh gi√° (Y/N)  ")
    choices = ["y", "n"]
    if choice.lower() not in choices:
        print("l·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i sau.....")
        return
    if choice.lower() == "y":
        db.price_modify()
    return


def option_8(db: ManageProduct):
    cart: list[ItemInReceipt] = []
    print("--------------B√ÅN H√ÄNG----------------")
    print("Vui long l·ª±a ch·ªçn s·∫£n ph·∫©m:")
    db.display()
    try:
        while True:
            choice = input("\n L·ª±a ch·ªçn: (id s·∫£n ph·∫©m c·∫ßn b√°n) - Kh√¥ng nh·∫≠p g√¨ v√† Enter ƒë·ªÉ xong l·ª±a ch·ªçn ")
            if len(choice) <= 0:
                break
            target = int()
            item: Merchandise | None = db.get_merchandise(target)
            if item is None:
                print("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!")
                return
            quan = int(input("Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn b√°n"))
            cart.append(ItemInReceipt(item, quan))

        confirm = input("X√°c nh·∫≠n b√°n c√°c s·∫£n ph·∫©m trong gi·ªè h√†ng? (Y/N)  ")
        choices = ["y", "n"]
        if confirm.lower() not in choices:
            print("l·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i sau.....")
            return
        if confirm.lower() == "y":
            db.add_invoice(cart)
    except ValueError:
        print("d·ª± li·ªáu nh·∫≠p kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i sau")
    return


def option_9(db: ManageProduct):
    print("--------------------------------------")
    db.display()
    print("--------------------------------------")
    try:
        target: int = int(input("Nh·∫≠p s·∫£n ph·∫©m mu·ªën x√≥a: "))
        if db.get_merchandise(target) is None:
            print("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m")
            return
        confirm = input("X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m? (Y/N)  ")
        choices = ["y", "n"]
        if confirm.lower() not in choices:
            print("l·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i sau.....")
            return
        if confirm.lower() == "y":
            db.remove_merchandise(target)
            return
    except ValueError:
        print("D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng ƒë√∫ng")
        return
